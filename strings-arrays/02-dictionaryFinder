/*
Given an alphabetical array of dictionary entries and a word to search for, find that word's definition (if it exists). This array of dictionary entries will be formatted like so:

Questions to Ask/Things to Consider
- The fact that the array is SORTED (alphabetical) means that we can do a binary search!
- Ask if this dictionary is going to be used over and over again, if that is the case might be better to save it to a hash map first

The optimized binary search solution, O(log n) time and O(1) space:
*/

//Binary search
const definitionOf = (word, dict) => {
  let begin = 0;
  let end = dict.length - 1;
  while (begin < end) {
    mid = Math.floor(begin + end / 2);
    let instance = dict[mid];
    if (instance.startsWith(word + ' - ')){
      return instance.slice(word.length + 3);
    } else if ( word > instance ) {
      begin = mid - 1;
    } else {
      end = mid + 1;
    }
  }
}

const dictionary = [
  'a - Used when mentioning someone or something for the first time in a text or conversation',
  'and - Used to connect words of the same part of speech, clauses, or sentences, that are to be taken jointly',
  'be - Exist',
  'in - Expressing the situation of something that is or appears to be enclosed or surrounded by something else',
  'of - Expressing the relationship between a part and a whole',
  'that - Used to identify a specific person or thing observed or heard by the speaker',
  'the - Denoting one or more people or things already mentioned or assumed to be common knowledge',
  'to - Expressing motion in the direction of (a particular location)'
];

// console.log(definitionOf('be', dictionary)); // should return 'Exist'
console.log(definitionOf('that', dictionary)); // should return 'Used to identify a specific person or thing observed or heard by the speaker'
// console.log(definitionOf('to', dictionary)); // should return 'Expressing motion in the direction of (a particular location)'

//other method
function definitionOf1 (word, dict) {
  let foundEntry;
  for (let i = 0; i < dict.length; i++) {
    if (dict[i].startsWith(word + ' - ')) {
      return dict[i].slice(word.length + 3); // "subtract" the word itself (plus the ' - ' part)
    }
  }
}
// with fancy `.find` method
function definitionOf2 (word, dict) {
  const foundEntry = dict.find(entry => entry.startsWith(word + ' - '));
  if (!foundEntry) return;
  return foundEntry.slice(word.length + 3); // "subtract" the word itself (plus the ' - ' part)
}
